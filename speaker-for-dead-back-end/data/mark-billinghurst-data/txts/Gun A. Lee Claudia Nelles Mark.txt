Gun A. Lee Claudia Nelles Mark Billinghurst Gerard Jounghyun Kim Virtual Reality Laboratory, Pohang University of Science and Technology 
 Human Interface Technology Laboratory New Zealand, University of Canterbury {endovert, gkim}@postech.ac.kr {claudia.nelles, mark.billinghurst}@hitlabnz.org 
authoring tangible augmented reality applications, called immersive authoring. The approach allows the user to carry out the authoring tasks within the AR application being built, so that the development and testing of the application can be done concurrently throughout the development process. We describe the functionalities and the interaction design for the proposed authoring system that are specifically targeted for intuitive specification of scenes and various object behaviors. Several cases of applications developed using the authoring system are presented. A small pilot user study was conducted to compare the proposed method to a nonimmersive approach, and the results have shown that the users generally found it easier and faster to carry out authoring tasks in the immersive environment. 
emerged as an important medium for education and entertainment. As the number of people building AR applications grows, it becomes increasingly apparent that a need exists for more efficient development tools. Most current AR applications are built using low level programming with dedicated tracking and graphics libraries, rather than from concrete components that content developers or artists are more used to. In this paper we describe a high level toolkit that enables rapid development of AR applications with no programming. 
Our toolkit is based on the Tangible AR input metaphor. Tangible AR [8] is an approach that combines tangible user interface [9] input methods with AR display and output. In this way the virtual content in the AR interfaces can be manipulated using physical objects, making these interfaces extremely intuitive. For example, in the VOMAR interface [7] a real paddle is used to pick up and place virtual 
furniture in a simple scene assembly program. Even complete novices were able to use the VOMAR application with ease. 
Tangible AR interfaces rely on accurate tracking of real objects. To achieve this we use the ARToolKit [1] computer vision tracking library which can calculate the position and orientation of a camera relative to square fiducial markers. ARToolKit makes the development of Tangible AR applications easier, yet it is still a software library that requires programming skills to be used. In contrast, desktop interactive multimedia contents can be easily built using various authoring tools, such as the Microsoft PowerPoint, or the Macromedia Director and Flash. These tools do not require the user to be an experienced programmer. 
Programs such as PowerPoint are relatively easy to use because they incorporate direct manipulation input with WYSIWYG (What You See Is What You Get) output. First used for desktop publishing, WYSIWYG editing is incorporated into most 2D authoring systems, providing fast, concurrent evaluation of the layout. 
The aim of our research is to develop an AR authoring interface that is as easy to use as desktop WYSIWYG interfaces. Our authoring tool uses Tangible AR interaction techniques and an authoring method called immersive authoring. Immersive authoring is an authoring method that allows the direct specification and testing of the content within the execution environment. Thus the development environment and the execution environments are the same, and the authoring environment provides the full experience of the building contents by itself. 
In the rest of the paper, we review previous work on authoring tangible augmented reality applications and interfaces that supported immersive authoring within immersive virtual reality environments. As a first step in developing the authoring environment, we analyzed the target application domain to define a Tangible AR application model to be used later in our authoring system. Based on this application model, we designed interaction methods for the authoring tasks and developed a prototype immersive authoring system. To illustrate the usability of this type of interface, we 
present several examples of Tangible AR applications built with our authoring system. In addition we compare our approach to a nonimmersive authoring system in terms of the ease of use and task performance. 
two major tasks. One is modeling the geometry (or form) of the virtual objects, and the other is describing the virtual object behaviors and interactions. 
Since it is a straightforward approach to use 3D interactions for modeling 3D geometries, there have been various attempts to construct (or model) a virtual world geometry within immersive virtual environments [4][13][15][20]. 
In contrast, there have been few attempts to define the behaviors while immersed in the virtual environment. Stiles and Pontecorvo [19] suggested a conceptual virtual reality system called Lingua Graphica that uses visual languages to program the virtual environment itself. However, the system remained as a concept and was never implemented. Steed and Slater [18] developed a system that visualized the links of data flow between the virtual objects, making users able to manipulate them directly. Lee et al. [11] pointed out that behavior authoring tasks could also benefit from direct 3D interactions and proposed to use a programming by demonstration approach for authoring virtual object behaviors. 
There have also been some attempts to construct virtual worlds from within AR environments. Poupyrev et al. [17] suggested a rapid prototyping tool for modeling virtual aircraft cockpits. The system provided a set of virtual gauges and instruments that can be copied over physical tiles. The users were able to test the layout using an AR interface. Kato et al. [7] suggested a generic interaction method for manipulating virtual objects within AR environments. They also showed their interaction method working in an AR modeling system for arranging furniture in a virtual room. Piekarski and Thomas [16] suggested 3D geometry modeling techniques for outdoor AR systems. The modeling system was for constructing virtual representations of physical landmarks while investigating the outdoor scenery. However, all of this work focused on modeling forms (or geometry) of virtual worlds within AR environments, and did not address authoring behaviors and interactions. 
In contrast with previous researches that have focused on 2D desktop authoring and then testing in AR environment [5][6][14], our research is focused on developing an AR tool that enables users to author AR 
contents (especially, the behaviors and interactions) from within the AR interface. One particularly valuable approach for such a tool is to base it on the Tangible AR design principles. We describe this further in the next section. 
each virtual object is registered to a physical object and 2) the user interacts with virtual objects by manipulating the corresponding physical object. As the definition implies, there are mainly two kinds of entities in Tangible AR applications: virtual objects and physical objects. 
Virtual objects are the main entities that the users are interested in and want to interact with. They are visualized in various forms, such as 2D images or text and, of course, 3D geometries. On the other hand, physical objects serve as tangible interaction points on which the visualization of virtual objects are overlaid, and where the user inputs are sensed. Tangible AR applications typically use real physical objects as input devices. 
Since the interaction between virtual objects and the user is mediated by physical objects, there should be logical connections between the physical and virtual objects; physical objects that the user physically interacts with and virtual objects that the user virtually interacts with. In order to draw a virtual object registered on a physical object, the position and orientation data of physical objects are needed to be fed to the corresponding virtual objects. 
However, the connection between physical and virtual objects can be more than a direct mapping between their property values. For example, suppose that we want to change the size of a virtual object according to the proximity of the physical object to the users view. The distance should be obtained by calculating the norm of the relative position vector between them, and this requires a couple of arithmetic operations. To represent these logical (or arithmetic) operations, we introduce another type of entity named logic box. A logic box might represent a single logical (or arithmetic) operator, or even a complex behavior such as controlling joint angles of a virtual character. 
Putting all these features together, we suggest a component based application model for Tangible AR applications. In our model, a Tangible AR application is described with a number of components and connections between their properties. Using the data flow model to describe the user interface for virtual environments traces back to an early virtual reality 
program named Body Electric [10] from VPL. And it also agrees with the previous work of Steed and Slater [18] that investigated on the immersive authoring in a virtual environment. 
There are three types of components in our application model: the physical object, the virtual object and the logic box. Each component has a set of properties that represents the state of the component, and each of these properties differs between different component types. Each property has a specific data type and read/write attribute according to the features of the component it represents. For instance, the position property of a physical object has a vector type value that represents a threedimensional coordinate. Its value can be read but cant be modified freely, since it is determined by the physical location of the physical object. Table 1 summarizes the properties of each type of components. Properties of physical objects are mainly related to their tracking results. The visibility of the physical object represents whether the object is successfully tracked, and the transformation, position and orientation properties represent the physical pose of it. Virtual objects have similar properties with physical objects, while they have writable attributes, meaning they can be freely modified. Some virtual objects representing sound sources also have boolean properties for playing the sound, in addition. Properties of logic boxes vary from one another. They are determined by the logical functions that the logic box represents. For instance, a vector addition logic box might have two input and one output vector properties, while a logic box representing a motor like behavior might have only a single property that gives the rotation value as the time flows. 
AR applications can be developed by connecting the components together. Properties of components can be connected to each other when they have compatible data types and attributes. For example, properties with scalar data types can be linked to those with scalar or boolean values, but cannot be linked to those with vectors, unless they are modified to a scalar value using a logic box. A property used as a target must be writable, while the readable attribute is sufficient for source properties. 
Once a property is linked to another, its value is updated according to the source property. For instance, a virtual object can be registered to a physical object simply by connecting the transformation attribute of the virtual object to that of the physical object. Typically, we introduce another property named base transformation to virtual objects to represent the parent reference frame of the object. 
task requirements for authoring tangible augmented reality applications. After specifying these requirements, we describe our interaction design chosen to fulfill the requirements. 
application by describing it with the established application model, i.e. defining entities and filling out their property values declared in the model. Since our application model is a component based one, the main authoring task will be manipulating the components. Table 2 summarizes the main tasks and their subtasks for manipulating components. 
the components. For creating a component, the user needs a way to specify the type of the component s/he wants to create. Users need to browse through a list showing what kind of components they can define. 
This requires a menulike interface to a set of items that users could browse through before choosing one of them. Some vital components, such as predefined physical objects, could exist without the need for being explicitly created. These components will be provided to the user from the beginning of the authoring process and the users would be able to use them immediately. Destroying a component requires the ability to select a component. Users need to select a component which they want to destroy, and this requires an interface for pointing to or selecting a specific virtual object. 
The created components may need to be modified to complete the AR application. According to the component model described in section 3, modifying a component is simply changing its property values. Prior to changing the component property value, a user needs to select the component and its property that s/he wants to change. This requires an interface for browsing over the list of properties and their values. After the property is selected, users need to specify a new value for it. The interface for specifying a component property value may vary according to the data type of the property. For example, simple scalar values are easy enough to modify with buttons or keypads while 3D transformations may be more conveniently modified with direct manipulation. 
The last main task of component manipulation is to connect their properties with each other. Similar to changing the property values, users first need to select components and the properties they want to connect or disconnect. Hence, the same interface could be reused for selecting properties, while a new interaction method is needed for specifying the status of their connection. 
tangible authoring interface, we begin by presenting design guidelines for immersive authoring systems. 
First of all, the most important feature of an immersive authoring system is the concept of What You Feel Is What You Get (WYFIWYG). This refers to the ability to feel all the sensory elements (visual, aural, and other elements if there are any) of the final content as it is being constructed. The main point of immersive authoring is to be able to experience the virtual worlds while they are being built. Therefore, immersive authoring systems are presumed to provide fast (or even concurrent) evaluation of the resulting content, a.k.a. WYFIWYG. 
Taking advantage of direct 3D manipulation is the next guideline for designing interactions for immersive authoring. Since the augmented reality environment 
implies interaction in threedimensional real space, direct 3D manipulation of virtual objects is easy and efficient within immersive authoring AR environments. 
The third guideline is to maintain the application model transparency. Although direct manipulations are efficient for threedimensional object manipulations, they might hide the details of the underlying application model. Users may need to explicitly assign specific values, such as the X coordinate of the object position, as well as to grab and drop it directly in the position and orientation they want to place it. Therefore, the system must provide transparent interfaces (or interaction methods) that show the details of the underlying application model, so that the users will have the ability to directly manipulate them. 
Finally, the interaction methods and interfaces for immersive authoring must be as similar as possible to the ones used in the target application domain being authored. We refer to this property as consistency. Adding different interfaces to the authoring environment implies context switching of the developers mental activity, and might distract their attention, delaying the development process. Distracting the users attentions might not only cause temporal delays to the development process, but also degrade the quality of the authoring virtual world. For instance, the presence, one of the most important quality measures of virtual (or augmented) environments, is degraded by distractions and makes it hard for developers to fully experience the authored virtual world and correctly evaluate it. Therefore, it is highly recommended to use similar (or at least nonconflicting) interfaces with the target application domain. 
interaction designs for each of the subtasks from Table 2. In order to maintain the consistency between the authoring environment and the final application, we avoided introducing new environmental setups. Instead, we only introduced props for the authoring task that can be used in the same environment with general Tangible AR applications. The physical props are simple pads and cubes that are commonly used in Tangible AR applications. Figure 1 shows three basic props used for the authoring task: a component browser, a manipulator and a disposer. Since only these props are added to the tangible AR application being built, the users are guaranteed to concurrently experience the final application without any disturbance throughout the development task, and this meets the WYFIWYG design guideline. 
For creating a new virtual object component (or logic box components), users need to select the type of virtual object they want to create. The component browser provides a physical interface for browsing over available 3D virtual objects and selecting the desired one. Users can browse over the models one by one, by pressing (pointing) [12] the arrow buttons on the both sides of the browser. To create a new virtual object, users point at the target 3D model for a second with the cube manipulator (shown in Figure 2). 
After a virtual object is selected with the manipulator prop, it moves according to the movement of the manipulator. The selected virtual object is kept in a fixed position relative to the manipulator when it is selected, and rotates according to the pose of the manipulator. To release (or unselect) the virtual object, the user simply needs to hide the manipulator for a 
couple of seconds. The virtual object will remain in the last position and orientation where it was placed. This interaction was designed following the notion of the drag and drop metaphor, which is one of the most well known direct manipulation methods in 2D desktop graphical user interfaces. 
The picking up and dropping interaction method is used for destroying objects, as well as for placing (or modifying) them. The upper row of the Figure 3 shows moving a virtual object from one physical object to another, while the lower row shows destroying it by dropping on the disposer prop. 
Although picking up an object and dropping it on a desired position and orientation takes advantage of the direct 3D manipulation, it hides the details of how the underlying application model is affected: the base transformation and visible properties of the moved virtual object are connected to the transformation and the visible properties of the physical object where the object is dropped, and the position and the orientation properties of the virtual object are changed in order to place the virtual object in an appropriate position relative to the physical object. Therefore to provide the model transparency, two more types of interfaces, inspector pads and keypads, were added. These elements provide detailed information about the selected components and let the users tweak them (see Figure 4). 
The interaction for selecting and deselecting a component with an inspector pad is similar to that of manipulators: pointing at a component for a second with the probe and hiding the interface. While the manipulators are only allowed to select virtual object components, users can also select physical objects with the inspector pads. 
Once a component is selected, the inspector pad shows the properties and their values of the selected component (see Figure 5). The users can browse through the properties by holding and manipulating the inspector pad. The list of properties shows up when the inspector pad is close enough to the users view, and the list can be scrolled up and down by tilting the inspector pad up and down. The property displayed on the middle of the inspector pad is selected when the inspector pad is moved away, and the inspector pad shows the value of the selected property. The display format of the value is changed according to its data type, and the read/write attributes are represented by the green arrows on each side of the inspector pad. 
To change the value of the selected property, users can use a keypad together with the inspector pad. Since most of the properties can be represented by numeric values, keypads are used for providing an input method for these. We designed a keypad using occlusion based interaction [12], the same interaction method applied to the model browser. A number of visual markers used for tracking the prop are also used for the button pressing interaction. Figure 4 shows an instance of the keypads that has +/buttons together with a unit selection button on the middle. Users can select the unit between 0.1, 1 and 10, and by pressing 
the +/buttons, the value is raised or lowered by the selected unit. To change the value of the property selected on the inspector pad, the user connects the keypad to the inspector pad, and operates the keypad to modify the value. Figure 6 shows an example of using an inspector pad and a keypad to change the scaling property of a cube virtual object component. 
Connecting object properties implies selection of multiple properties. Instead of introducing another selection method, here we simply duplicated the inspector pad to select two object properties being connected. 
The interaction method for connecting two selected properties can be designed in a various ways. Weve first tried to directly map the logical connection between properties to the physical connection between inspector pads with puzzle cut edges. Although the physical connection worked as an easy and intuitive input method, it was not feasible to use it for displaying the current connection status, since they were not controllable in an automatic manner. In addition, direct mapping of physical and logical connections was poor to prevent incompatible connections, e.g. connecting properties with incompatible data types or attributes. To solve these problems, weve altered the interaction design to toggle between connected and disconnected states when two edges of inspector pads were contacted. Each vertical edge of the inspector pads were used as an input and output port of the selected property. And by contacting these edges together, a link was made (or destroyed) between them if the selected properties were compatible. The same method was used for connecting keypads and inspector pads (see Figure 6). 
Figure 7 shows an example of connecting properties of two components. The visibility property of a virtual fish is connected to the same property of a physical paddle, making the fish disappear when the paddle is hidden by the users hand. 
developed on a consumer level personal computer. The computer was running Windows XP operating system on a Pentium 4 processor with 1GB main memory. A GeForce4 3D graphics card from NVIDIA was used to accelerate the OpenGL graphics processing. 
For tracking physical objects, we used a vision based tracking method. The ARToolKit [1] software library was used for calculating the 3D position and orientation of the visual markers, and a plain USB web camera from Logitech was used to acquire video images for the tracking. The capturing resolution was set to 320x240 and the shutter speed was 30 frames per second. The camera was mounted on a head mounted display to provide a real world view to the user, forming a video seethrough AR configuration. 
We used our custom 3D model loader, based on the OpenGL library, to visualize the 3D graphics contents and the virtual authoring tools. To make the interaction easier for selecting components with the manipulator and inspector pads, bounding boxes are visualized around the component objects, and their colors are changed according to their status: normal, pointed and selected. These bounding boxes are only shown when there are authoring props within the users view. 
The first example is a simple scene with a windmill (see Figure 8). The scene consists of three virtual objects: the ground, a tower and a vane. It took about a minute to place the virtual objects and check that every thing was placed in the right place. A logic box 
representing a rotation behavior was used to specify the vane to spin around. The logic box was set invisible for viewing. It totally took less than 3 minutes total to construct the whole scene, connect the properties to define the behavior, and to validate the final product. 
In addition to passive animations of virtual objects, interactive features can also be added. Figure 9 shows a sequence of images, constructing an interactive Tangible AR application similar to the Shared Space application [2]. The application shows two tiles with a virtual object on each, a hare and a tortoise for example. The user can examine the virtual objects by manipulating the tiles on which they are anchored. When two tiles are brought close together, different models are shown, such as the hare and the tortoise greeting each other (see the last row of Figure 9). 
To build this application, four virtual objects were needed: the normal and greeting posed models for the hare and tortoise. First, the virtual objects were placed on two physical tiles, one for the hare and another for the tortoise. The visibilities of the virtual objects were controlled by the proximity value of the physical tiles. In order to check the distance and to control the visibilities, we used a logic box with a special function. The logic box had two input properties of position, and output properties with a boolean value that represented whether the two input positions were close enough or not. By connecting position properties of the two tiles to the logic box input, and connecting near and far boolean output properties of the logic box to four virtual objects visibility, properly, the application was completed. About 5 minutes were needed for building and testing the whole application. 
The last example application is an interactive storytelling book application, similar to the MagicBook [3] (see Figure 10). We used one of the popular stories of Aesop, The race between a hare and a tortoise. The story consists of three main scenes: starting the race, the hare taking a nap and the tortoise winning. To add interactivity to the story line, we made a decision point on the second scene to let the users choose whether the hare should sleep or not. According to the users decision, the winner on the last scene would be determined differently. 
Thirteen premodeled 3D objects were brought in and three sheets of paper with printed markers were used as the book pages. To implement the interactive feature, special properties for occlusion based interaction were added to the physical object component: a set of boolean valued properties indicating which button (i.e. marker) was pressed (for the last). These properties were connected to the visibility of the characters placed on the final scene, selecting different endings of the story according to the users decision. It took about 15 minutes to construct the scenes and to connect object properties for implementing the interaction. 
authoring interface. The test has been held at the end of a series of workshops in which participants learned 3D modeling. Each of these workshops ran for 34 days, and the participants were children (914 years old) and their parents. In these workshops, the participants created virtual contents and then used our authoring tool to add these contents to an AR scene. It 
should be noted that the participants were not experts in programming or 3D modeling, and had not experienced augmented reality before. Despite this, they were all able to create an AR scene by the end of the workshop. The participants responded they couldnt believe that it could be so easy to create AR scenes and they particularly enjoyed using the immersive authoring interface to manipulate their models. 
The user study was to compare the usability of our immersive authoring tool with another desktop AR authoring tool, CATOMIR [21]. The main aims of the study were to find out how these authoring tools would be accepted by the users, how efficient each of them would be for the participants to use, and where both of them were showing usability faults and how to get rid of them. 
Similar to our immersive authoring tool, CATOMIR is also aimed to allow nonprogrammers to create AR applications. It is also based on a similar component based model to represent the AR contents. However, it uses more traditional mouse, keyboard and desktop screenbased interfaces. Users can create components by selecting them from a list in 2D graphical user interface. The property values of a component can be investigated and modified with a dialog box styled interface. Users can also link the properties by dragging between the two properties they want to connect, e.g. visibility properties of the tracking marker component and the 3D geometry component. Positioning and rotating the virtual objects can be achieved with a dialog box interfaces where the user types in the numeric values or pushes +/buttons to change the transformation values. In addition, it also provides a simple assistant tangible prop for translating and rotating task. However, users still need the mouse to set the mode (translation or rotation) and the axis while using the assistant prop. After constructing a compound of components in a 2D desktop authoring environment, users can run and test their application with the AR interface. 
There were 24 participants (16 male and 8 female), ranging in age from 9 to 50 years who were novices in 3D graphics and programming. The participants had a training phase before the test, where they trained on each authoring tool until they were confident in using it. During the training phase the participants learnt to create an AR scene by loading 3D models, placing them on a specific marker and bringing it into a specific position. Each participant tried the authoring tools in a different sequence to prevent the study being influenced by their previous experiences. After they were comfortable with using the tools, the task for the main test was given. 
Each participant used both tools and was given the same test task with each, although with different contents (3D models). The task was to load a specific model, to put it onto a specific marker and to bring it into a specific position, which theyve practiced during the training phase. 
The time for the task completion was measured and the number of errors was counted. After performing the tasks the participants were asked to fill in a questionnaire and answer interview questions. The questions were to gather further information about where problems with the programs occurred, which tool they preferred and how they felt about using each tool. 
The average speed for the whole task participants who used our immersive authoring tool were on average 25% faster than with the CATOMIR (see Figure 11). A ttest for dependent samples for iaTAR (M=3:53, SD=2.24) and CATOMIR (M=5:05, SD=2.97) turned out significantly different (t(23)=2.84, p=0.00094). 
The number of mistakes while using the immersive authoring tool was 21, of which none required any help from the observer to correct them. In comparison, with the desktop authoring interface, the total was 36 mistakes, 21 of which couldnt be solved by the participants themselves. We consider this result shows that the immersive authoring tool is more intuitive for the users that it is easy to learn and use. 
When asked about the users preference, 42% of subjects (10 users) said they preferred using the immersive interface, while 33 % (8 users) said they would appreciate a mixture of both types, which allows the user to swap between different modes (traditional mousekeyboard input and new Tangible AR interface). Only 25 % (6 users) said they would want to keep the mousekeyboard interaction. 
Although the test showed the efficiency and easiness of using immersive authoring interfaces for overall layout tasks, in the user interview, precise controls requiring numeric inputs still appeared to be 
more convenient with the 2D desktop user interfaces. However, the Tangible AR interfaces were much preferred for the tasks that include 3D spatial understandings, such as 3D rotations. 
Convinced with the pilot user study, we are planning to conduct more specific user studies to investigate more detailed features of the immersive authoring approach. 
development and the user study, the proposed immersive authoring system appeared to be efficient and easy to use, yet feasible enough to create various Tangible AR applications. The concurrent testing with implementation throughout the development process appeared to be helping the developers on reducing the time for switching between implementation and testing phase. 
However, currently provided logic boxes by the authoring system were not comprehensive enough for building applications with complex behaviors. In order to build applications with more complicated behaviors (or interactions), various logic box components would be necessary. A library of various logical entities is expected to be added to the authoring tool. In addition, we are also investigating interaction techniques in which users build their own custom logic boxes within the authoring environment and add them to the library for the later use. 
method for Tangible AR applications and described our implementation of a prototype authoring system to show its feasibility. The system used a component based application model and interaction methods, designed through analyzing the application domain. A number of development cases were described to show that our authoring system provides an efficient and easy way for constructing Tangible AR applications. 
Although the data flow model between components covered the basic functions of Tangible AR applications, we also plan to investigate other behavior models such as event driven models for future support. We are also investigating inclusion of motion capture functions, so that the users could describe complicated animations by demonstration. 
Other interaction methods for authoring tasks are also in need of testing. For instance, we are expecting natural gestures for controlling and authoring virtual object behaviors. Using keyboards and other 
conventional user interfaces within AR systems for programming tasks is another interesting topic. 
With additional research on application models and interactions, the authors are convinced that immersive authoring has a bright future as a development method for augmented reality applications. 
 [1] ARToolKit. http://www.hitl.washington.edu/artoolkit [2] M. Billinghurst, I. Poupyrev, H. Kato and R. May, Mixing Realities in Shared Space: An Augmented Reality Interface for Collaborative Computing, Proceedings of IEEE International Conference on Multimedia and Expo (ICME 2000), New York, U.S.A., Jul.30Aug.2, 2000, pp. 16411644. [3] M. Billinghurst, H. Kato and I. Poupyrev, The MagicBook Moving Seamlessly between Reality and Virtuality, IEEE Computer Graphics and Applications, 21(3), May, 2001, pp. 68. [4] J. Butterworth, A. Davidson, S. Hench and T. M. Olano, 3DM: A Three Dimensional Modeler Using a HeadMounted Display, Proceedings of Symposium on Interactive 3D Graphics, Cambridge, Massachusetts, U.S.A., 1992, pp. 135138. [5] S. Gven and S. Feiner, Authoring 3D Hypermedia for Wearable Augmented and Virtual Reality, Proceedings of IEEE International Symposium on Wearable Computers (ISWC03), New York, U.S.A., Oct.2123, 2003, pp. 118126. [6] M. Haringer and H. T. Regenbrecht, A Pragmatic Approach to Augmented Reality Authoring, Proceedings of the International Symposium on Mixed and Augmented Reality (ISMAR02), Darmstadt, Germany, Sept.30Oct.1, 2002, pp. 237245. [7] H. Kato, M. Billinghurst, I. Poupyrev, K. Imamoto and K. Tachibana, Virtual Object Manipulation on a TableTop AR Environment, Proceedings of the International Symposium on Augmented Reality (ISAR 2000), Munich, Germany, Oct.56, 2000, pp. 111119. [8] H. Kato, M. Billinghurst, I. Poupyrev, N. Tetsutani and K. Tachibana, Tangible Augmented Reality for Human Computer Interaction, Proceedings of Nicograph 2001, Nagoya, Japan, 2001. [9] H. Ishii and B. Ullmer, Tangible Bits: Towards Seamless Interfaces between People, Bits and Atoms, Proceedings of the SIGCHI conference on Human Factors in Computing Systems, Atlanta, Georgia, U.S.A., Mar.2227, 1997, pp. 234241. [10] R. S. Kalawsky, The Science of Virtual Reality and Virtual Environments, AddisonWesley, 1993, pp. 212219. 
[11] G. A. Lee, G. J. Kim and C. M. Park, Modeling Virtual Object Behavior within Virtual Environment, Proceedings of ACM Symposium on Virtual Reality Software and Technology (VRST 2002), Hong Kong, China, Nov. 1113, 2002, pp. 4148. [12] G. A. Lee, M. Billinghurst, G. J. Kim, Occlusion based Interaction Methods for Tangible Augmented Reality Environments, Proceedings of ACM SIGGRAPH International Conference on VirtualReality Continuum and its Applications in Industry (VRCAI 2004), NTU, Singapore, Jun.1618, 2004, pp. 419426. [13] J. Liang and M. Green, JDCAD: A Highly Interactive 3D Modeling System, Computer &amp; Graphics, 18(4), 1994, pp. 499506. [14] B. MacIntyre, M. Gandy, J. Bolter, S. Dow and B. Hannigan, DART: The Designers Augmented Reality Toolkit, Proceedings of the International Symposium on Mixed and Augmented Reality (ISMAR03), Tokyo, Japan, Oct.710, 2003, pp.329330. [15] M. R. Mine, ISSAC: A MetaCAD System for Virtual Environments, ComputerAided Design, 29(8), August, 1997, pp. 547553. [16] W. Piekarski and Bruce H. Thomas, Interactive Augmented Reality Techniques for Construction at a Distance of 3D Geometry, Proceedings of Immersive Projection Technology / Eurographics Virtual Environments Conference (IPT/EGVE 2003), Zurich, Switzerland, May 2223, 2003. [17] I. Poupyrev, D. S. Tan, M. Billinghurst, H. Kato, H. Regenbrecht and N. Tetsutani, Developing a Generic Augmented Reality Interface, IEEE Computer, 35(3), March, 2002, pp. 4450. [18] A. Steed and M. Slater, Dataflow Representation for Defining Behaviours within Virtual Environments, Proceedings of Virtual Reality Annual International Symposium (VRAIS96), Mar.30Apr.3, 1996, pp. 163167. [19] R. Stiles and M. Pontecorvo, Lingua Graphica: A Visual Language for Virtual Environments, Proceedings of IEEE Workshop on Visual Languages, Sept.1518, 1992, pp. 225227. [20] G. Wesche and H. Seidel, FreeDrawer A FreeForm Sketching System on the Responsive Workbench, Proceedings of ACM Symposium on Virtual Reality Software and Technology (VRST 2001), Alberta, Canada, Nov.1517, 2001, pp. 167174. [21] J. Zauner, M. Haller, Authoring of Mixed Reality Applications including MultiMarker Calibration for Mobile Devices, Proceedings of 10th Eurographics Symposium on Virtual Environments (EGVE 2004), Grenoble, France, Jun.89, 2004, pp. 8790. 
&lt;&lt; /ASCII85EncodePages false /AllowTransparency false /AutoPositionEPSFiles true /AutoRotatePages /None /Binding /Left /CalGrayProfile (Gray Gamma 2.2) /CalRGBProfile (sRGB IEC619662.1) /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2) /sRGBProfile (sRGB IEC619662.1) /CannotEmbedFontPolicy /Error /CompatibilityLevel 1.3 /CompressObjects /Tags /CompressPages true /ConvertImagesToIndexed true /PassThroughJPEGImages true /CreateJDFFile false /CreateJobTicket false /DefaultRenderingIntent /Default /DetectBlends true /ColorConversionStrategy /LeaveColorUnchanged /DoThumbnails false /EmbedAllFonts true /EmbedJobOptions true /DSCReportingLevel 0 /SyntheticBoldness 1.00 /EmitDSCWarnings false /EndPage1 /ImageMemory 1048576 /LockDistillerParams false /MaxSubsetPct 100 /Optimize true /OPM 1 /ParseDSCComments true /ParseDSCCommentsForDocInfo true /PreserveCopyPage true /PreserveEPSInfo true /PreserveHalftoneInfo false /PreserveOPIComments false /PreserveOverprintSettings true /StartPage 1 /SubsetFonts true /TransferFunctionInfo /Apply /UCRandBGInfo /Preserve /UsePrologue false /ColorSettingsFile (Color Management Off) /AlwaysEmbed [ true ] /NeverEmbed [ true ] /AntiAliasColorImages false /DownsampleColorImages true /ColorImageDownsampleType /Bicubic /ColorImageResolution 500 /ColorImageDepth1 /ColorImageDownsampleThreshold 1.50000 /EncodeColorImages true /ColorImageFilter /DCTEncode /AutoFilterColorImages true /ColorImageAutoFilterStrategy /JPEG /ColorACSImageDict &lt;&lt; /QFactor 0.15 /HSamples [1 1 1 1] /VSamples [1 1 1 1] &gt;&gt; /ColorImageDict &lt;&lt; /QFactor 0.15 /HSamples [1 1 1 1] /VSamples [1 1 1 1] &gt;&gt; /JPEG2000ColorACSImageDict &lt;&lt; /TileWidth 256 /TileHeight 256 /Quality 30 &gt;&gt; /JPEG2000ColorImageDict &lt;&lt; /TileWidth 256 /TileHeight 256 /Quality 30 &gt;&gt; /AntiAliasGrayImages false /DownsampleGrayImages true /GrayImageDownsampleType /Bicubic /GrayImageResolution 500 /GrayImageDepth1 /GrayImageDownsampleThreshold 1.50000 /EncodeGrayImages true /GrayImageFilter /DCTEncode /AutoFilterGrayImages true /GrayImageAutoFilterStrategy /JPEG /GrayACSImageDict &lt;&lt; /QFactor 0.15 /HSamples [1 1 1 1] /VSamples [1 1 1 1] &gt;&gt; /GrayImageDict &lt;&lt; /QFactor 0.15 /HSamples [1 1 1 1] /VSamples [1 1 1 1] &gt;&gt; /JPEG2000GrayACSImageDict &lt;&lt; /TileWidth 256 /TileHeight 256 /Quality 30 &gt;&gt; /JPEG2000GrayImageDict &lt;&lt; /TileWidth 256 /TileHeight 256 /Quality 30 &gt;&gt; /AntiAliasMonoImages false /DownsampleMonoImages true /MonoImageDownsampleType /Average /MonoImageResolution 1200 /MonoImageDepth1 /MonoImageDownsampleThreshold 1.50000 /EncodeMonoImages true /MonoImageFilter /CCITTFaxEncode /MonoImageDict &lt;&lt; /K1 &gt;&gt; /AllowPSXObjects false /PDFX1aCheck false /PDFX3Check false /PDFXCompliantPDFOnly false /PDFXNoTrimBoxError true /PDFXTrimBoxToMediaBoxOffset [ 0.00000 0.00000 0.00000 0.00000 ] /PDFXSetBleedBoxToMediaBox true /PDFXBleedBoxToTrimBoxOffset [ 0.00000 0.00000 0.00000 0.00000 ] /PDFXOutputIntentProfile (None) /PDFXOutputCondition () /PDFXRegistryName (http://www.color.org) /PDFXTrapped /Unknown /Description &lt;&lt; /JPN &lt;FEFF3053306e8a2d5b9a306f30019ad889e350cf5ea6753b50cf3092542b308030d730ea30d730ec30b9537052377528306e00200050004400460020658766f830924f5c62103059308b3068304d306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103057305f00200050004400460020658766f8306f0020004100630072006f0062006100740020304a30883073002000520065006100640065007200200035002e003000204ee5964d30678868793a3067304d307e305930023053306e8a2d5b9a306b306f30d530a930f330c8306e57cb30818fbc307f304c5fc59808306730593002&gt; /FRA &lt;FEFF004f007000740069006f006e007300200070006f0075007200200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000500044004600200064006f007400e900730020006400270075006e00650020007200e90073006f006c007500740069006f006e002000e9006c0065007600e9006500200070006f0075007200200075006e00650020007100750061006c0069007400e90020006400270069006d007000720065007300730069006f006e00200070007200e9007000720065007300730065002e0020005500740069006c006900730065007a0020004100630072006f0062006100740020006f00750020005200650061006400650072002c002000760065007200730069006f006e00200035002e00300020006f007500200075006c007400e9007200690065007500720065002c00200070006f007500720020006c006500730020006f00750076007200690072002e0020004c00270069006e0063006f00720070006f0072006100740069006f006e002000640065007300200070006f006c0069006300650073002000650073007400200072006500710075006900730065002e&gt; /DEU &lt;FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e0020005000440046002d0044006f006b0075006d0065006e00740065006e0020006d00690074002000650069006e006500720020006800f60068006500720065006e002000420069006c0064006100750066006c00f600730075006e0067002c00200075006d002000650069006e00650020007100750061006c00690074006100740069007600200068006f006300680077006500720074006900670065002000410075007300670061006200650020006600fc0072002000640069006500200044007200750063006b0076006f0072007300740075006600650020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f0062006100740020006f0064006500720020006d00690074002000640065006d002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e00200042006500690020006400690065007300650072002000450069006e007300740065006c006c0075006e00670020006900730074002000650069006e00650020005300630068007200690066007400650069006e00620065007400740075006e00670020006500720066006f0072006400650072006c006900630068002e&gt; /PTB &lt;FEFF005500740069006c0069007a006500200065007300740061007300200063006f006e00660069006700750072006100e700f5006500730020007000610072006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000500044004600200063006f006d00200075006d00610020007200650073006f006c007500e700e3006f00200064006500200069006d006100670065006d0020007300750070006500720069006f0072002000700061007200610020006f006200740065007200200075006d00610020007100750061006c0069006400610064006500200064006500200069006d0070007200650073007300e3006f0020006d0065006c0068006f0072002e0020004f007300200064006f00630075006d0065006e0074006f0073002000500044004600200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002c002000520065006100640065007200200035002e00300020006500200070006f00730074006500720069006f0072002e00200045007300740061007300200063006f006e00660069006700750072006100e700f50065007300200072006500710075006500720065006d00200069006e0063006f00720070006f0072006100e700e3006f00200064006500200066006f006e00740065002e&gt; /DAN &lt;FEFF004200720075006700200064006900730073006500200069006e0064007300740069006c006c0069006e006700650072002000740069006c0020006100740020006f0070007200650074007400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006d006500640020006800f8006a006500720065002000620069006c006c00650064006f0070006c00f80073006e0069006e0067002000740069006c0020007000720065002d00700072006500730073002d007500640073006b007200690076006e0069006e0067002000690020006800f8006a0020006b00760061006c0069007400650074002e0020005000440046002d0064006f006b0075006d0065006e007400650072006e00650020006b0061006e002000e50062006e006500730020006d006500640020004100630072006f0062006100740020006f0067002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e00200044006900730073006500200069006e0064007300740069006c006c0069006e0067006500720020006b007200e600760065007200200069006e0074006500670072006500720069006e006700200061006600200073006b007200690066007400740079007000650072002e&gt; /NLD &lt;FEFF004700650062007200750069006b002000640065007a006500200069006e007300740065006c006c0069006e00670065006e0020006f006d0020005000440046002d0064006f00630075006d0065006e00740065006e0020007400650020006d0061006b0065006e0020006d00650074002000650065006e00200068006f00670065002000610066006200650065006c00640069006e00670073007200650073006f006c007500740069006500200076006f006f0072002000610066006400720075006b006b0065006e0020006d0065007400200068006f006700650020006b00770061006c0069007400650069007400200069006e002000650065006e002000700072006500700072006500730073002d006f006d0067006500760069006e0067002e0020004400650020005000440046002d0064006f00630075006d0065006e00740065006e0020006b0075006e006e0065006e00200077006f007200640065006e002000670065006f00700065006e00640020006d006500740020004100630072006f00620061007400200065006e002000520065006100640065007200200035002e003000200065006e00200068006f006700650072002e002000420069006a002000640065007a006500200069006e007300740065006c006c0069006e00670020006d006f006500740065006e00200066006f006e007400730020007a0069006a006e00200069006e006700650073006c006f00740065006e002e&gt; /ESP &lt;FEFF0055007300650020006500730074006100730020006f007000630069006f006e006500730020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000500044004600200063006f006e0020006d00610079006f00720020007200650073006f006c00750063006900f3006e00200064006500200069006d006100670065006e00200071007500650020007000650072006d006900740061006e0020006f006200740065006e0065007200200063006f007000690061007300200064006500200070007200650069006d0070007200650073006900f3006e0020006400650020006d00610079006f0072002000630061006c0069006400610064002e0020004c006f007300200064006f00630075006d0065006e0074006f00730020005000440046002000730065002000700075006500640065006e00200061006200720069007200200063006f006e0020004100630072006f00620061007400200079002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e0020004500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007200650071007500690065007200650020006c006100200069006e0063007200750073007400610063006900f3006e0020006400650020006600750065006e007400650073002e&gt; /SUO &lt;FEFF004e00e4006900640065006e002000610073006500740075007300740065006e0020006100760075006c006c006100200076006f0069006400610061006e0020006c0075006f006400610020005000440046002d0061007300690061006b00690072006a006f006a0061002c0020006a006f006900640065006e002000740075006c006f0073007400750073006c00610061007400750020006f006e0020006b006f0072006b006500610020006a00610020006b007500760061006e0020007400610072006b006b007500750073002000730075007500720069002e0020005000440046002d0061007300690061006b00690072006a0061007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f006200610074002d0020006a0061002000520065006100640065007200200035002e00300020002d006f0068006a0065006c006d0061006c006c0061002000740061006900200075007500640065006d006d0061006c006c0061002000760065007200730069006f006c006c0061002e0020004e00e4006d00e4002000610073006500740075006b0073006500740020006500640065006c006c00790074007400e4007600e4007400200066006f006e0074007400690065006e002000750070006f00740075007300740061002e&gt; /ITA &lt;FEFF00550073006100720065002000710075006500730074006500200069006d0070006f007300740061007a0069006f006e00690020007000650072002000630072006500610072006500200064006f00630075006d0065006e00740069002000500044004600200063006f006e00200075006e00610020007200690073006f006c0075007a0069006f006e00650020006d0061006700670069006f00720065002000700065007200200075006e00610020007100750061006c0069007400e00020006400690020007000720065007300740061006d007000610020006d00690067006c0069006f00720065002e0020004900200064006f00630075006d0065006e00740069002000500044004600200070006f00730073006f006e006f0020006500730073006500720065002000610070006500720074006900200063006f006e0020004100630072006f00620061007400200065002000520065006100640065007200200035002e003000200065002000760065007200730069006f006e006900200073007500630063006500730073006900760065002e002000510075006500730074006500200069006d0070006f007300740061007a0069006f006e006900200072006900630068006900650064006f006e006f0020006c002700750073006f00200064006900200066006f006e007400200069006e0063006f00720070006f0072006100740069002e&gt; /NOR &lt;FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f00700070007200650074007400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006d006500640020006800f80079006500720065002000620069006c00640065006f00700070006c00f80073006e0069006e006700200066006f00720020006800f800790020007500740073006b00720069006600740073006b00760061006c00690074006500740020006600f800720020007400720079006b006b002e0020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50070006e006500730020006d006500640020004100630072006f0062006100740020006f0067002000520065006100640065007200200035002e00300020006f0067002000730065006e006500720065002e00200044006900730073006500200069006e006e007300740069006c006c0069006e00670065006e00650020006b0072006500760065007200200073006b00720069006600740069006e006e00620079006700670069006e0067002e&gt; /SVE &lt;FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006e00e40072002000640075002000760069006c006c00200073006b0061007000610020005000440046002d0064006f006b0075006d0065006e00740020006d006500640020006800f6006700720065002000620069006c0064007500700070006c00f60073006e0069006e00670020006600f60072002000700072006500700072006500730073007500740073006b0072006900660074006500720020006100760020006800f600670020006b00760061006c0069007400650074002e0020005000440046002d0064006f006b0075006d0065006e00740065006e0020006b0061006e002000f600700070006e006100730020006d006500640020004100630072006f0062006100740020006f00630068002000520065006100640065007200200035002e003000200065006c006c00650072002000730065006e006100720065002e00200044006500730073006100200069006e0073007400e4006c006c006e0069006e0067006100720020006b007200e400760065007200200069006e006b006c00750064006500720069006e00670020006100760020007400650063006b0065006e0073006e006900740074002e&gt; /ENU &lt;FEFF005500730065002000740068006500730065002000730065007400740069006e0067007300200074006f0020006300720065006100740065002000500044004600200064006f00630075006d0065006e0074007300200077006900740068002000680069006700680065007200200069006d0061006700650020007200650073006f006c007500740069006f006e00200066006f0072002000680069006700680020007100750061006c0069007400790020007000720065002d007000720065007300730020007000720069006e00740069006e0067002e0020005400680065002000500044004600200064006f00630075006d0065006e00740073002000630061006e0020006200650020006f00700065006e00650064002000770069007400680020004100630072006f00620061007400200061006e0064002000520065006100640065007200200035002e003000200061006e00640020006c0061007400650072002e002000540068006500730065002000730065007400740069006e006700730020007200650071007500690072006500200066006f006e007400200065006d00620065006400640069006e0067002e&gt; &gt;&gt; &gt;&gt; setdistillerparams &lt;&lt; /HWResolution [2400 2400] /PageSize [612.000 792.000] &gt;&gt; setpagedevice 
